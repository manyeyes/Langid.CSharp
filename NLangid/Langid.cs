// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: langid.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Langid {

  /// <summary>Holder for reflection information generated from langid.proto</summary>
  public static partial class LangidReflection {

    #region Descriptor
    /// <summary>File descriptor for langid.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LangidReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxsYW5naWQucHJvdG8SBmxhbmdpZCLrAQoSTGFuZ3VhZ2VJZGVudGlmaWVy",
            "EhEKCW51bV9mZWF0cxgBIAIoBRIRCgludW1fbGFuZ3MYAiACKAUSEgoKbnVt",
            "X3N0YXRlcxgDIAIoBRIXCgt0a19uZXh0bW92ZRgEIAMoBUICEAESFwoLdGtf",
            "b3V0cHV0X2MYBSADKAVCAhABEhcKC3RrX291dHB1dF9zGAYgAygFQgIQARIV",
            "Cgl0a19vdXRwdXQYByADKAVCAhABEhEKBW5iX3BjGAggAygBQgIQARISCgZu",
            "Yl9wdGMYCSADKAFCAhABEhIKCm5iX2NsYXNzZXMYCiADKAk="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Langid.LanguageIdentifier), global::Langid.LanguageIdentifier.Parser, new[]{ "NumFeats", "NumLangs", "NumStates", "TkNextmove", "TkOutputC", "TkOutputS", "TkOutput", "NbPc", "NbPtc", "NbClasses" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LanguageIdentifier : pb::IMessage<LanguageIdentifier>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LanguageIdentifier> _parser = new pb::MessageParser<LanguageIdentifier>(() => new LanguageIdentifier());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LanguageIdentifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Langid.LangidReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LanguageIdentifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LanguageIdentifier(LanguageIdentifier other) : this() {
      _hasBits0 = other._hasBits0;
      numFeats_ = other.numFeats_;
      numLangs_ = other.numLangs_;
      numStates_ = other.numStates_;
      tkNextmove_ = other.tkNextmove_.Clone();
      tkOutputC_ = other.tkOutputC_.Clone();
      tkOutputS_ = other.tkOutputS_.Clone();
      tkOutput_ = other.tkOutput_.Clone();
      nbPc_ = other.nbPc_.Clone();
      nbPtc_ = other.nbPtc_.Clone();
      nbClasses_ = other.nbClasses_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LanguageIdentifier Clone() {
      return new LanguageIdentifier(this);
    }

    /// <summary>Field number for the "num_feats" field.</summary>
    public const int NumFeatsFieldNumber = 1;
    private readonly static int NumFeatsDefaultValue = 0;

    private int numFeats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumFeats {
      get { if ((_hasBits0 & 1) != 0) { return numFeats_; } else { return NumFeatsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        numFeats_ = value;
      }
    }
    /// <summary>Gets whether the "num_feats" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumFeats {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "num_feats" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumFeats() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "num_langs" field.</summary>
    public const int NumLangsFieldNumber = 2;
    private readonly static int NumLangsDefaultValue = 0;

    private int numLangs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumLangs {
      get { if ((_hasBits0 & 2) != 0) { return numLangs_; } else { return NumLangsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        numLangs_ = value;
      }
    }
    /// <summary>Gets whether the "num_langs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumLangs {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "num_langs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumLangs() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "num_states" field.</summary>
    public const int NumStatesFieldNumber = 3;
    private readonly static int NumStatesDefaultValue = 0;

    private int numStates_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumStates {
      get { if ((_hasBits0 & 4) != 0) { return numStates_; } else { return NumStatesDefaultValue; } }
      set {
        _hasBits0 |= 4;
        numStates_ = value;
      }
    }
    /// <summary>Gets whether the "num_states" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumStates {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "num_states" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumStates() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "tk_nextmove" field.</summary>
    public const int TkNextmoveFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_tkNextmove_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> tkNextmove_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Tokenizer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> TkNextmove {
      get { return tkNextmove_; }
    }

    /// <summary>Field number for the "tk_output_c" field.</summary>
    public const int TkOutputCFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_tkOutputC_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> tkOutputC_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> TkOutputC {
      get { return tkOutputC_; }
    }

    /// <summary>Field number for the "tk_output_s" field.</summary>
    public const int TkOutputSFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_tkOutputS_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> tkOutputS_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> TkOutputS {
      get { return tkOutputS_; }
    }

    /// <summary>Field number for the "tk_output" field.</summary>
    public const int TkOutputFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_tkOutput_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> tkOutput_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> TkOutput {
      get { return tkOutput_; }
    }

    /// <summary>Field number for the "nb_pc" field.</summary>
    public const int NbPcFieldNumber = 8;
    private static readonly pb::FieldCodec<double> _repeated_nbPc_codec
        = pb::FieldCodec.ForDouble(66);
    private readonly pbc::RepeatedField<double> nbPc_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// Linear Classifier Parameters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> NbPc {
      get { return nbPc_; }
    }

    /// <summary>Field number for the "nb_ptc" field.</summary>
    public const int NbPtcFieldNumber = 9;
    private static readonly pb::FieldCodec<double> _repeated_nbPtc_codec
        = pb::FieldCodec.ForDouble(74);
    private readonly pbc::RepeatedField<double> nbPtc_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> NbPtc {
      get { return nbPtc_; }
    }

    /// <summary>Field number for the "nb_classes" field.</summary>
    public const int NbClassesFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_nbClasses_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> nbClasses_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Class Labels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> NbClasses {
      get { return nbClasses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LanguageIdentifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LanguageIdentifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumFeats != other.NumFeats) return false;
      if (NumLangs != other.NumLangs) return false;
      if (NumStates != other.NumStates) return false;
      if(!tkNextmove_.Equals(other.tkNextmove_)) return false;
      if(!tkOutputC_.Equals(other.tkOutputC_)) return false;
      if(!tkOutputS_.Equals(other.tkOutputS_)) return false;
      if(!tkOutput_.Equals(other.tkOutput_)) return false;
      if(!nbPc_.Equals(other.nbPc_)) return false;
      if(!nbPtc_.Equals(other.nbPtc_)) return false;
      if(!nbClasses_.Equals(other.nbClasses_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNumFeats) hash ^= NumFeats.GetHashCode();
      if (HasNumLangs) hash ^= NumLangs.GetHashCode();
      if (HasNumStates) hash ^= NumStates.GetHashCode();
      hash ^= tkNextmove_.GetHashCode();
      hash ^= tkOutputC_.GetHashCode();
      hash ^= tkOutputS_.GetHashCode();
      hash ^= tkOutput_.GetHashCode();
      hash ^= nbPc_.GetHashCode();
      hash ^= nbPtc_.GetHashCode();
      hash ^= nbClasses_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasNumFeats) {
        output.WriteRawTag(8);
        output.WriteInt32(NumFeats);
      }
      if (HasNumLangs) {
        output.WriteRawTag(16);
        output.WriteInt32(NumLangs);
      }
      if (HasNumStates) {
        output.WriteRawTag(24);
        output.WriteInt32(NumStates);
      }
      tkNextmove_.WriteTo(output, _repeated_tkNextmove_codec);
      tkOutputC_.WriteTo(output, _repeated_tkOutputC_codec);
      tkOutputS_.WriteTo(output, _repeated_tkOutputS_codec);
      tkOutput_.WriteTo(output, _repeated_tkOutput_codec);
      nbPc_.WriteTo(output, _repeated_nbPc_codec);
      nbPtc_.WriteTo(output, _repeated_nbPtc_codec);
      nbClasses_.WriteTo(output, _repeated_nbClasses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasNumFeats) {
        output.WriteRawTag(8);
        output.WriteInt32(NumFeats);
      }
      if (HasNumLangs) {
        output.WriteRawTag(16);
        output.WriteInt32(NumLangs);
      }
      if (HasNumStates) {
        output.WriteRawTag(24);
        output.WriteInt32(NumStates);
      }
      tkNextmove_.WriteTo(ref output, _repeated_tkNextmove_codec);
      tkOutputC_.WriteTo(ref output, _repeated_tkOutputC_codec);
      tkOutputS_.WriteTo(ref output, _repeated_tkOutputS_codec);
      tkOutput_.WriteTo(ref output, _repeated_tkOutput_codec);
      nbPc_.WriteTo(ref output, _repeated_nbPc_codec);
      nbPtc_.WriteTo(ref output, _repeated_nbPtc_codec);
      nbClasses_.WriteTo(ref output, _repeated_nbClasses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasNumFeats) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumFeats);
      }
      if (HasNumLangs) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumLangs);
      }
      if (HasNumStates) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumStates);
      }
      size += tkNextmove_.CalculateSize(_repeated_tkNextmove_codec);
      size += tkOutputC_.CalculateSize(_repeated_tkOutputC_codec);
      size += tkOutputS_.CalculateSize(_repeated_tkOutputS_codec);
      size += tkOutput_.CalculateSize(_repeated_tkOutput_codec);
      size += nbPc_.CalculateSize(_repeated_nbPc_codec);
      size += nbPtc_.CalculateSize(_repeated_nbPtc_codec);
      size += nbClasses_.CalculateSize(_repeated_nbClasses_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LanguageIdentifier other) {
      if (other == null) {
        return;
      }
      if (other.HasNumFeats) {
        NumFeats = other.NumFeats;
      }
      if (other.HasNumLangs) {
        NumLangs = other.NumLangs;
      }
      if (other.HasNumStates) {
        NumStates = other.NumStates;
      }
      tkNextmove_.Add(other.tkNextmove_);
      tkOutputC_.Add(other.tkOutputC_);
      tkOutputS_.Add(other.tkOutputS_);
      tkOutput_.Add(other.tkOutput_);
      nbPc_.Add(other.nbPc_);
      nbPtc_.Add(other.nbPtc_);
      nbClasses_.Add(other.nbClasses_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NumFeats = input.ReadInt32();
            break;
          }
          case 16: {
            NumLangs = input.ReadInt32();
            break;
          }
          case 24: {
            NumStates = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            tkNextmove_.AddEntriesFrom(input, _repeated_tkNextmove_codec);
            break;
          }
          case 42:
          case 40: {
            tkOutputC_.AddEntriesFrom(input, _repeated_tkOutputC_codec);
            break;
          }
          case 50:
          case 48: {
            tkOutputS_.AddEntriesFrom(input, _repeated_tkOutputS_codec);
            break;
          }
          case 58:
          case 56: {
            tkOutput_.AddEntriesFrom(input, _repeated_tkOutput_codec);
            break;
          }
          case 66:
          case 65: {
            nbPc_.AddEntriesFrom(input, _repeated_nbPc_codec);
            break;
          }
          case 74:
          case 73: {
            nbPtc_.AddEntriesFrom(input, _repeated_nbPtc_codec);
            break;
          }
          case 82: {
            nbClasses_.AddEntriesFrom(input, _repeated_nbClasses_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NumFeats = input.ReadInt32();
            break;
          }
          case 16: {
            NumLangs = input.ReadInt32();
            break;
          }
          case 24: {
            NumStates = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            tkNextmove_.AddEntriesFrom(ref input, _repeated_tkNextmove_codec);
            break;
          }
          case 42:
          case 40: {
            tkOutputC_.AddEntriesFrom(ref input, _repeated_tkOutputC_codec);
            break;
          }
          case 50:
          case 48: {
            tkOutputS_.AddEntriesFrom(ref input, _repeated_tkOutputS_codec);
            break;
          }
          case 58:
          case 56: {
            tkOutput_.AddEntriesFrom(ref input, _repeated_tkOutput_codec);
            break;
          }
          case 66:
          case 65: {
            nbPc_.AddEntriesFrom(ref input, _repeated_nbPc_codec);
            break;
          }
          case 74:
          case 73: {
            nbPtc_.AddEntriesFrom(ref input, _repeated_nbPtc_codec);
            break;
          }
          case 82: {
            nbClasses_.AddEntriesFrom(ref input, _repeated_nbClasses_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
